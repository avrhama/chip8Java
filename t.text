

/*
8xy6 - SHR Vx {, Vy}
Set Vx = Vx SHR 1.
If the least-significant bit of Vx is 1, then VF is set to 1, otherwise 0. Then Vx is divided by 2.
*/
public void op8xy6() {
	byte x = getx(cpu.opcode);
	cpu.registers[0xf] = cpu.registers[x] & 1
	cpu.registers[x] = cpu.registers[x] >> 1
}

/*
8xy7 - SUBN Vx, Vy
Set Vx = Vy - Vx, set VF = NOT borrow.
If Vy > Vx, then VF is set to 1, otherwise 0. Then Vx is subtracted from Vy, and the results stored in Vx.
*/
public void op8xy7() {
	byte x = getx(cpu.opcode);
	byte y = gety(cpu.opcode);
	if cpu.registers[y] > cpu.registers[x] {
		cpu.registers[0xf] = 1
	} else {
		cpu.registers[0xf] = 0
	}
	cpu.registers[x] = cpu.registers[y] - cpu.registers[x]
}

/*
8xyE - SHL Vx {, Vy}
Set Vx = Vx SHL 1.
If the most-significant bit of Vx is 1, then VF is set to 1, otherwise to 0. Then Vx is multiplied by 2.
*/
public void op8xyE() {
	byte x = getx(cpu.opcode);
	cpu.registers[0xf] = cpu.registers[x] >> 7
	cpu.registers[x] = cpu.registers[x] << 1
}

/*
9xy0 - SNE Vx, Vy
Skip next instruction if Vx != Vy.
The values of Vx and Vy are compared, and if they are not equal, the program counter is increased by 2.
*/
public void op9xy0() {
	byte x = getx(cpu.opcode);
	byte y = gety(cpu.opcode);
	if cpu.registers[x] != cpu.registers[y] {
		cpu.PC += 2
	}
}

/*
Annn - LD I, addr
Set I = nnn.
The value of register I is set to nnn.
*/
public void opAnnn() {
	int nnn = getnnn(cpu.opcode);
	cpu.I = nnn
}

/*
Bnnn - JP V0, addr
Jump to location nnn + V0.
The program counter is set to nnn plus the value of V0.
*/
public void opBnnn() {
	int nnn = getnnn(cpu.opcode);
	cpu.PC = uint16(cpu.registers[0]) + nnn
}

/*
Cxkk - RND Vx, byte
Set Vx = random byte AND kk.
The interpreter generates a random number from 0 to 255, which is then ANDed with the value kk. The results are stored in Vx. See instruction 8xy2 for more information on AND.
*/
public void opCxkk() {
	byte x = getx(cpu.opcode);
	byte kk = getkk(cpu.opcode);
	rand.Seed(time.Now().UnixNano())
	t := uint8(rand.Intn(256))
	cpu.registers[x] = kk & t
}

/*
Dxyn - DRW Vx, Vy, nibble
Display n-byte sprite starting at memory location I at (Vx, Vy), set VF = collision.
The interpreter reads n bytes from memory, starting at the address stored in I. These bytes are then displayed as sprites on screen at coordinates (Vx, Vy). Sprites are XORed onto the existing screen. If this causes any pixels to be erased, VF is set to 1, otherwise it is set to 0. If the sprite is positioned so part of it is outside the coordinates of the display, it wraps around to the opposite side of the screen. See instruction 8xy3 for more information on XOR, and section 2.4, Display, for more information on the Chip-8 screen and sprites.
*/
public void opDxyn() {
	int n = getn(cpu.opcode);
	byte x = getx(cpu.opcode);
	byte y = gety(cpu.opcode);
	posX := int(cpu.registers[x])
	posY := int(cpu.registers[y])
	cpu.registers[0xf] = 0
	for i := uint16(0); i < n; i++ {
		data := cpu.bus.ram.read(cpu.I + i)
		//pointer to the curr pixel(bit) in the data
		stepPixel := 7
		posY = posY % cpu.bus.display.height
		for ; stepPixel >= 0; stepPixel-- {
			newPixelBit := (data >> stepPixel) & 0x1
			if newPixelBit == 1 {

				currPosX := posX + (7 - stepPixel)
				currPosX = currPosX % cpu.bus.display.width

				oldpixel := cpu.bus.display.getPixel(currPosX, posY)
				//indecates if the curr present pixel is black pixel or not
				oldPixelBit := uint8(0)
				if oldpixel.r == 255 && oldpixel.b == 255 && oldpixel.g == 255 {
					oldPixelBit = uint8(1)
				}

				//check if there is collision
				if oldPixelBit+newPixelBit == 2 {
					cpu.registers[0xf] = 1
				}
				c := Black

				if (oldPixelBit ^ newPixelBit) == 1 {
					c = White

				}
				cpu.bus.display.setPixel(currPosX, posY, c)
			}

		}
		posY++
	}
}

/*
Ex9E - SKP Vx
Skip next instruction if key with the value of Vx is pressed.
Checks the keyboard, and if the key corresponding to the value of Vx is currently in the down position, PC is increased by 2.
*/
public void opEx9E() {
	byte x = getx(cpu.opcode);
	keyCode := fmt.Sprintf("%X", cpu.registers[x])
	if cpu.bus.joypad.keys[keyCode].pressed {
		cpu.PC = cpu.PC + 2
	}
}

/*
ExA1 - SKNP Vx
Skip next instruction if key with the value of Vx is not pressed.
Checks the keyboard, and if the key corresponding to the value of Vx is currently in the up position, PC is increased by 2.
*/
public void opExA1() {
	byte x = getx(cpu.opcode);
	keyCode := fmt.Sprintf("%X", cpu.registers[x])
	if !cpu.bus.joypad.keys[keyCode].pressed {
		cpu.PC = cpu.PC + 2
	}
}

/*
Fx07 - LD Vx, DT
Set Vx = delay timer value.
The value of DT is placed into Vx.
*/
public void opFx07() {
	byte x = getx(cpu.opcode);
	cpu.registers[x] = cpu.dt.value
}

/*
Fx0A - LD Vx, K
Wait for a key press, store the value of the key in Vx.
All execution stops until a key is pressed, then the value of that key is stored in Vx.
*/
public void opFx0A() {
	byte x = getx(cpu.opcode);
	key := cpu.bus.joypad.getKey()
	cpu.registers[x] = key.value
}

/*
Fx15 - LD DT, Vx
Set delay timer = Vx.
DT is set equal to the value of Vx.
*/
public void opFx15() {
	byte x = getx(cpu.opcode);
	cpu.dt.value = cpu.registers[x]
}

/*
Fx18 - LD ST, Vx
Set sound timer = Vx.
ST is set equal to the value of Vx.
*/
public void opFx18() {
	byte x = getx(cpu.opcode);
	cpu.st.value = cpu.registers[x]
}

/*
Fx1E - ADD I, Vx
Set I = I + Vx.
The values of I and Vx are added, and the results are stored in I.
*/
public void opFx1E() {
	byte x = getx(cpu.opcode);
	cpu.I = cpu.I + uint16(cpu.registers[x])
}

/*
Fx29 - LD F, Vx
Set I = location of sprite for digit Vx.
The value of I is set to the location for the hexadecimal sprite corresponding to the value of Vx. See section 2.4, Display, for more information on the Chip-8 hexadecimal font.
*/
public void opFx29() {
	byte x = getx(cpu.opcode);
	cpu.I = uint16(5 * cpu.registers[x])

}

/*
Fx33 - LD B, Vx
Store BCD representation of Vx in memory locations I, I+1, and I+2.
The interpreter takes the decimal value of Vx, and places the hundreds digit in memory at location in I, the tens digit at location I+1, and the ones digit at location I+2.
*/
public void opFx33() {
	byte x = getx(cpu.opcode);
	v := cpu.registers[x]
	o := v % 10
	v = v / 10
	t := v % 10
	v = v / 10
	h := v % 10

	cpu.bus.ram.write(cpu.I, h)
	cpu.bus.ram.write(cpu.I+1, t)
	cpu.bus.ram.write(cpu.I+2, o)

}

/*
Fx55 - LD [I], Vx
Store registers V0 through Vx in memory starting at location I.
The interpreter copies the values of registers V0 through Vx into memory, starting at the address in I.
*/
public void opFx55() {
	x := uint16(getx(cpu.opcode))
	for i := uint16(0); i <= x; i++ {
		cpu.bus.ram.write(cpu.I+i, cpu.registers[i])
	}
	cpu.I = cpu.I + x + 1
}

/*
Fx65 - LD Vx, [I]
Read registers V0 through Vx from memory starting at location I.
The interpreter reads values from memory starting at location I into registers V0 through Vx.
*/
public void opFx65() {
	x := uint16(getx(cpu.opcode))
	for i := uint16(0); i <= x; i++ {
		cpu.registers[i] = cpu.bus.ram.read(cpu.I + i)
	}
	cpu.I = cpu.I + x + 1
}